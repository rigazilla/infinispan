name: On Build Do Test
on:
   workflow_run:
      workflows: [On PR Open or Push Do Build]
      types: [completed]

permissions:
  contents: read
  packages: read

concurrency:
  # Only cancel jobs for PR updates
  group: ci-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get-info-js:
      name: "js source run"
      runs-on: ubuntu-latest
      outputs:
         sourceHeadSha: ${{ github.event.workflow_run.head_sha }}
         pullRequestNumber: ${{ steps.workflow-run-info.outputs.pullRequestNumber }}
         sourceHeadBranch: ${{ steps.workflow-run-info.outputs.pullRequestLabels }}
         sourceEvent: ${{ github.event.workflow_run.name }}
      steps:
         - id: workflow-run-info
           uses: rigazilla/infinispan/.github/actions/get-origin-info@main
           with:
            head_sha: $ {{ github.event.workflow_run.head_sha }}
            event: $ {{ github.event.workflow_run.name }}
  get-info:
    name: "Get information about the source run"
    runs-on: ubuntu-latest
    outputs:
      sourceHeadRepo: ${{ steps.workflow-run-info.outputs.sourceHeadRepo }}
      sourceHeadBranch: ${{ steps.workflow-run-info.outputs.sourceHeadBranch }}
      sourceHeadSha: ${{ steps.workflow-run-info.outputs.sourceHeadSha }}
      mergeCommitSha: ${{ steps.workflow-run-info.outputs.mergeCommitSha }}
      targetCommitSha: ${{ steps.workflow-run-info.outputs.targetCommitSha }}
      pullRequestNumber: ${{ steps.workflow-run-info.outputs.pullRequestNumber }}
      pullRequestLabels: ${{ steps.workflow-run-info.outputs.pullRequestLabels }}
      targetBranch: ${{ steps.workflow-run-info.outputs.targetBranch }}
      sourceEvent: ${{ steps.workflow-run-info.outputs.sourceEvent }}
    steps:
      - name: "Get information about the current run"
        uses: potiuk/get-workflow-origin@v1_1
        id: workflow-run-info
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}

  ci-build-test-pr:
    needs: get-info-js
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Maven Test
    runs-on: ubuntu-latest
    env:
      MAVEN_OPTS: "-Xmx1500m -XX:+HeapDumpOnOutOfMemoryError"
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: ./.github/actions/setup-java

      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: 21
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Maven Artifacts
        uses: ./.github/actions/extract-maven-artifacts
        with:
         run_id: ${{ github.event.workflow_run.id }}

      - name: Maven Test
        uses: ./.github/actions/test-infinispan

      - name: Archive commit sha PR
        if: >
          (success() || failure()) &&
          needs.get-info-js.outputs.sourceEvent == 'pull_request'
        run: |
           echo -n ${{ needs.get-info-js.outputs.sourceHeadSha }} > github-sha.txt

      - name: Archive commit sha push
        if: >
          (success() || failure()) &&
          needs.get-info-js.outputs.sourceEvent  == 'push'
        run: |
           echo -n ${{ needs.get-info-js.outputs.sourceHeadSha }} > github-sha.txt

      - name: Archive surefire test report
        if: (success() || failure())
        uses: actions/upload-artifact@v4
        with:
          name: surefire-test-report
          path: |
            **/surefire-reports/TEST-*.xml
            **/*.dump*
            **/hs_err_*
            github-sha.txt
            !**/target/*-reports*/**/TEST-*FLAKY.xml

# Create artifact with branch name and surefile flaky test report
      - name: Check flaky report existence
        if: success() || failure()
        id: check_flaky_report
        uses: andstor/file-existence-action@v3
        with:
          files: "**/target/*-reports*/**/TEST-*FLAKY.xml"

      - name: Archive base_ref
        if: (success() || failure()) && steps.check_flaky_report.outputs.files_exists == 'true'
        env:
          TARGET_BRANCH: ${{ needs.get-info-js.outputs.sourceHeadSha }}
          EVENT_NAME: ${{ needs.get-info-js.outputs.sourceEvent }}
          PR_NUMBER: ${{ needs.get-info-js.outputs.pullRequestNumber }}
          EVENT_NUMBER: ${{ github.event.workflow_run.id }}
        run: |
          echo -n $TARGET_BRANCH > target-branch.txt
          echo -n $EVENT_NAME > event-name.txt
          echo -n $EVENT_NUMBER > event-number.txt
          echo -n $PR_NUMBER > pr-number.txt

      - name: Archive flaky test report
        if: (success() || failure()) && steps.check_flaky_report.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: flaky-test-report
          path: |
            **/target/*-reports*/**/TEST-*FLAKY.xml
            target-branch.txt
            event-name.txt
            event-number.txt
            pr-number.txt

  db:
    needs: get-info-js
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dbs:
          - mssql
          - oracle
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: ./.github/actions/setup-java

      - name: Extract Maven Artifacts
        uses: ./.github/actions/extract-maven-artifacts
        with:
         run_id: ${{ github.event.workflow_run.id }}

      - name: Infinispan Version
        run: echo "ISPN_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Download Infinispan Server
        uses: actions/download-artifact@v4
        with:
          name: infinispan-dist
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ github.token }}

      - name: Extract Infinispan Server
        run: |
          cd /tmp
          unzip ${GITHUB_WORKSPACE}/infinispan-server-${ISPN_VERSION}.zip

      - name: Test
        run: |
          ./mvnw verify -s maven-settings.xml -B -e -pl server/tests --fail-at-end \
            -Dansi.strip=true \
            -DdefaultTestGroup=database \
            -Dorg.infinispan.test.database.types=${{ matrix.dbs }} \
            -Dorg.infinispan.test.server.dir=/tmp/infinispan-server-${ISPN_VERSION}
